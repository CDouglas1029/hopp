import { Injectable } from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';
import * as O from 'fp-ts/Option';
import * as E from 'fp-ts/Either';
import { AuthUser } from 'src/types/AuthUser';
import { USER_NOT_FOUND } from 'src/errors';
import { SessionType, User } from './user.model';
import { USER_UPDATE_FAILED } from 'src/errors';
import { PubSubService } from 'src/pubsub/pubsub.service';
import { stringToJson } from 'src/utils';

@Injectable()
export class UserService {
  constructor(
    private prisma: PrismaService,
    private readonly pubsub: PubSubService,
  ) {}

  /**
   * Find User with given email id
   *
   * @param {string} email User's email
   * @returns {Promise<O.None | O.Some<User>>} Option of found User
   */
  async findUserByEmail(email: string) {
    try {
      const user = await this.prisma.user.findUniqueOrThrow({
        where: {
          email: email,
        },
      });
      return O.some(user);
    } catch (error) {
      return O.none;
    }
  }

  /**
   * Find User with given ID
   *
   * @param {string} userUid User ID
   * @returns {Promise<O.None | O.Some<User>>} Option of found User
   */
  async findUserById(userUid: string) {
    try {
      const user = await this.prisma.user.findUniqueOrThrow({
        where: {
          uid: userUid,
        },
      });
      return O.some(user);
    } catch (error) {
      return O.none;
    }
  }

  /**
   * Create a new User when logged in via a Magic Link
   *
   * @param {string} email User's Email
   * @returns {Promise<User>} Created User
   */
  async createUserMagic(email: string) {
    const createdUser = await this.prisma.user.create({
      data: {
        email: email,
        accounts: {
          create: {
            provider: 'magic',
            providerAccountId: email,
          },
        },
      },
    });

    return createdUser;
  }

  /**
   * Create a new User when logged in via a SSO provider
   *
   * @param {string} accessToken  User's access token generated by providers
   * @param {string} refreshToken User's refresh token generated by providers
   * @param {any} profile Data received from SSO provider on the users account
   * @returns {Promise<User>} Created User
   */
  async createUserSSO(accessToken: string, refreshToken: string, profile) {
    const createdUser = await this.prisma.user.create({
      data: {
        displayName: !profile.displayName ? null : profile.displayName,
        email: profile.emails[0].value,
        photoURL: !profile.photos ? null : profile.photos[0].value,
        accounts: {
          create: {
            provider: profile.provider,
            providerAccountId: profile.id,
            providerRefreshToken: refreshToken,
            providerAccessToken: accessToken,
          },
        },
      },
    });

    return createdUser;
  }

  /**
   * Create a new  Account for a given User
   *
   * @param {AuthUser} user User object
   * @param {string} accessToken User's access token generated by providers
   * @param {string} refreshToken User's refresh token generated by providers
   * @param {any} profile Data received from SSO provider on the users account
   * @returns {Promise<Account>} Created Account
   */
  async createProviderAccount(
    user: AuthUser,
    accessToken: string,
    refreshToken: string,
    profile,
  ) {
    const createdProvider = await this.prisma.account.create({
      data: {
        provider: profile.provider,
        providerAccountId: profile.id,
        providerRefreshToken: refreshToken ? refreshToken : null,
        providerAccessToken: accessToken ? accessToken : null,
        user: {
          connect: {
            uid: user.uid,
          },
        },
      },
    });

    return createdProvider;
  }

  /**
   * Update User displayName and photoURL
   *
   * @param {AuthUser} user User object
   * @param {any} profile Data received from SSO provider on the users account
   * @returns {Promise<E.Right<User> | E.Left<"user/not_found">>} Updated user object
   */
  async updateUserDetails(user: AuthUser, profile) {
    try {
      const updatedUser = await this.prisma.user.update({
        where: {
          uid: user.uid,
        },
        data: {
          displayName: !profile.displayName ? null : profile.displayName,
          photoURL: !profile.photos ? null : profile.photos[0].value,
        },
      });
      return E.right(updatedUser);
    } catch (error) {
      return E.left(USER_NOT_FOUND);
    }
  }

  /**
   * Update a user's sessions
   * @param user User object
   * @param currentRESTSession user's current REST session
   * @param currentGQLSession user's current GQL session
   * @returns a Either of User or error
   */
  async updateUserSessions(
    user: User,
    currentSession: string,
    sessionType: string,
  ): Promise<E.Right<User> | E.Left<string>> {
    const validatedSession = await this.validateSession(currentSession);
    if (E.isLeft(validatedSession)) return E.left(validatedSession.left);

    try {
      const sessionObj = {};
      switch (sessionType) {
        case SessionType.GQL:
          sessionObj['currentGQLSession'] = validatedSession.right;
          break;
        case SessionType.REST:
          sessionObj['currentRESTSession'] = validatedSession.right;
          break;
        default:
          return E.left(USER_UPDATE_FAILED);
      }

      const dbUpdatedUser = await this.prisma.user.update({
        where: { uid: user.uid },
        data: sessionObj,
      });

      const updatedUser: User = {
        ...dbUpdatedUser,
        currentGQLSession: dbUpdatedUser.currentGQLSession
          ? JSON.stringify(dbUpdatedUser.currentGQLSession)
          : null,
        currentRESTSession: dbUpdatedUser.currentRESTSession
          ? JSON.stringify(dbUpdatedUser.currentRESTSession)
          : null,
      };

      // Publish subscription for user updates
      await this.pubsub.publish(`user/${updatedUser.uid}/updated`, updatedUser);

      return E.right(updatedUser);
    } catch (e) {
      return E.left(USER_UPDATE_FAILED);
    }
  }

  /**
   * Validate and parse currentRESTSession and currentGQLSession
   * @param sessionData string of the session
   * @returns a Either of JSON object or error
   */
  async validateSession(sessionData: string) {
    const jsonSession = stringToJson(sessionData);
    if (E.isLeft(jsonSession)) return E.left(jsonSession.left);

    return E.right(jsonSession.right);
  }
}
